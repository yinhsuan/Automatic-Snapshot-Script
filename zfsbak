#!/usr/bin/env python3.6

import sys, datetime, subprocess, os, re
from Crypto.Cipher import AES

def usage():
    print('Usage: zbackup [[--list | --delete | --export] target-dataset [ID]')
    print('                | [--import] target-dataset filename')
    print('                | target-dataset [rotation count]]')
    exit(1)

def get_snapshots(dataset=None):
    snapshots = []
    output = subprocess.run(['zfs', 'list', '-t', 'snapshot'], stdout=subprocess.PIPE).stdout
    output = output.decode()
    for i, line in enumerate(output.split('\n')[1:]):
        cols = line.split(' ')
        if cols:
            s = cols[0].split('@')
            if s[1:] and (not dataset or s[0] == dataset):
                snapshots.append({
                    'id': i+1,
                    'dataset': s[0],
                    'create_time': s[1]})
    return snapshots

def delete_snapshots(dataset, Id=None):
    print(f'delete_snapshots({dataset}, {Id})')
    snapshots = get_snapshots(dataset)
    action = False
    for ss in snapshots:
        if Id == None or ss['id'] == Id:
            action = True
            subprocess.run(['zfs', 'destroy', f'{dataset}@{ss["create_time"]}'])
    if not action:
        print('the specific snapshot not found, do nothing')

if not sys.argv[1:]:
    usage()

if sys.argv[1] == '--list':
    if sys.argv[2:]:
        target_dataset = sys.argv[2]
    else:
        target_dataset = ''

    if sys.argv[3:]:
        try:
            Id = int(sys.argv[3])
        except ValueError:
            print('id should be integer')
            usage()
    else:
        Id = None

    print(f'list: target={target_dataset} id={Id}')

    snapshots = get_snapshots(target_dataset)
    print('%-20s%-20s%-20s' % ('ID', 'Dataset', 'Time'))
    for ss in snapshots:
        if Id == None or Id == ss['id']:
            print('%-20d%-20s%-20s' % (ss['id'], ss['dataset'], ss['create_time']))

elif sys.argv[1] == '--delete':
    if not sys.argv[2:]:
        usage()
    target_dataset = sys.argv[2]
    Id = None
    if sys.argv[3:]:
        try:
            Id = int(sys.argv[3])
        except ValueError:
            print('id should be integer')
            usage()

    print(f'delete: target={target_dataset} id={Id}')

    delete_snapshots(target_dataset, Id)

elif sys.argv[1] == '--export':
    if not sys.argv[2:]:
        usage()
    target_dataset = sys.argv[2]
    Id = 1
    if sys.argv[3:]:
        try:
            Id = int(sys.argv[3])
        except ValueError:
            print('id should be integer')
            usage()

    print(f'export: target={target_dataset} id={Id}')

    found = False
    snapshots = get_snapshots(target_dataset)
    for ss in snapshots:
        if ss['id'] == Id:
            found = True
            target_name = f"{ss['dataset']}@{ss['create_time']}"
            filename = target_name.replace('/', ']') + ".xz"
            print(f'Exporting to {filename}')
            with subprocess.Popen(
                    ['zfs', 'send', '-R', '-v', target_name],
                    stdout=subprocess.PIPE) as proc:
                with open(filename, 'wb') as file:
                    subprocess.run(['xz'], stdin=proc.stdout, stdout=file)
                    proc.wait()
            with open(filename, 'rb') as xz_file:
                key = b''
                while len(key) != 32:
                    key = input('Please enter the key for encryption (32 bytes): ').strip().encode()
                    if len(key) == 32: break
                    print('enter again')
                cipher = AES.new(key) # default: ECB
                with open(filename+'.enc', 'wb') as enc_file:
                    data = xz_file.read()
                    while len(data) % 16 != 0:
                        data += b'\0'
                    enc_file.write(cipher.encrypt(data))
                os.remove(filename)
    if not found:
        print('specified dataset snapshot not found')

elif sys.argv[1] == '--import':
    if not sys.argv[3:]:
        usage()
    target_dataset = sys.argv[2]
    filename = sys.argv[3]

    print(f'import: target={target_dataset} filename={filename}')

    print(f'Importing {filename}')
    if not re.match(r'.*\.xz\.enc$', filename):
        print('invalid filename, should be ended in .xz.enc')

    # target_name = filename[-8:].replace(']', '/')

    with open(filename, 'rb') as enc_file:
        key = b''
        while len(key) != 32:
            key = input('Please enter the key for encryption (32 bytes): ').strip().encode()
            if len(key) == 32: break
            print('enter again')
        cipher = AES.new(key) # default: ECB
        with open(filename[:-4], 'wb') as xz_file:
            xz_file.write(cipher.decrypt(enc_file.read()))

    with open(filename[:-7], 'wb') as raw_file:
        subprocess.run(['xzcat', filename[:-4]], stdout=raw_file)

    with open(filename[:-7], 'rb') as raw_file:
        subprocess.run(
            ['zfs', 'recv', '-Fv', target_dataset],
            stdin=raw_file)

    os.remove(filename[:-4])
    os.remove(filename[:-7])

else:
    # create new snapshot
    target_dataset = sys.argv[1]

    if sys.argv[2:]:
        try:
            rotation_count = int(sys.argv[2])
        except ValueError:
            print('rotation count should be integer')
            usage()
    else:
        rotation_count = 20

    print(f'target_dataset={target_dataset}, rotation_count={rotation_count}')

    rotate = False
    snapshots = get_snapshots(target_dataset)
    if len(snapshots) >= rotation_count:
        oldest = min(snapshots, key = lambda el: el['create_time'])
        delete_snapshots(target_dataset, oldest['id'])
        rotate = True

    create_time = datetime.datetime.now()
    print(f'{"Rotate" if rotate else "Snap"} {target_dataset}@{create_time.strftime("%c")}')
    subprocess.run(['zfs', 'snapshot', f'{target_dataset}@{create_time.strftime("%Y.%m.%d_%H:%M:%S")}'])